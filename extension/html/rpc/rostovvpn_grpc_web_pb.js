/**
 * @fileoverview gRPC-Web generated client stub for rostovvpnrpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: rostovvpn.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var base_pb = require('./base_pb.js')
const proto = {};
proto.rostovvpnrpc = require('./rostovvpn_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.HelloClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.HelloPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.HelloRequest,
 *   !proto.rostovvpnrpc.HelloResponse>}
 */
const methodDescriptor_Hello_SayHello = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Hello/SayHello',
  grpc.web.MethodType.UNARY,
  base_pb.HelloRequest,
  base_pb.HelloResponse,
  /**
   * @param {!proto.rostovvpnrpc.HelloRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_pb.HelloResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.HelloRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.HelloResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.HelloResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.HelloClient.prototype.sayHello =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Hello/SayHello',
      request,
      metadata || {},
      methodDescriptor_Hello_SayHello,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.HelloRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.HelloResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.HelloPromiseClient.prototype.sayHello =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Hello/SayHello',
      request,
      metadata || {},
      methodDescriptor_Hello_SayHello);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.CoreClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.CorePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.StartRequest,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_Start = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/Start',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.StartRequest,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.StartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.CoreInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.start =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/Start',
      request,
      metadata || {},
      methodDescriptor_Core_Start,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.start =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/Start',
      request,
      metadata || {},
      methodDescriptor_Core_Start);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_CoreInfoListener = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/CoreInfoListener',
  grpc.web.MethodType.SERVER_STREAMING,
  base_pb.Empty,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.coreInfoListener =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/CoreInfoListener',
      request,
      metadata || {},
      methodDescriptor_Core_CoreInfoListener);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.coreInfoListener =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/CoreInfoListener',
      request,
      metadata || {},
      methodDescriptor_Core_CoreInfoListener);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.OutboundGroupList>}
 */
const methodDescriptor_Core_OutboundsInfo = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/OutboundsInfo',
  grpc.web.MethodType.SERVER_STREAMING,
  base_pb.Empty,
  proto.rostovvpnrpc.OutboundGroupList,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.OutboundGroupList.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.OutboundGroupList>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.outboundsInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/OutboundsInfo',
      request,
      metadata || {},
      methodDescriptor_Core_OutboundsInfo);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.OutboundGroupList>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.outboundsInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/OutboundsInfo',
      request,
      metadata || {},
      methodDescriptor_Core_OutboundsInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.OutboundGroupList>}
 */
const methodDescriptor_Core_MainOutboundsInfo = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/MainOutboundsInfo',
  grpc.web.MethodType.SERVER_STREAMING,
  base_pb.Empty,
  proto.rostovvpnrpc.OutboundGroupList,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.OutboundGroupList.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.OutboundGroupList>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.mainOutboundsInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/MainOutboundsInfo',
      request,
      metadata || {},
      methodDescriptor_Core_MainOutboundsInfo);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.OutboundGroupList>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.mainOutboundsInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/MainOutboundsInfo',
      request,
      metadata || {},
      methodDescriptor_Core_MainOutboundsInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.SystemInfo>}
 */
const methodDescriptor_Core_GetSystemInfo = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/GetSystemInfo',
  grpc.web.MethodType.SERVER_STREAMING,
  base_pb.Empty,
  proto.rostovvpnrpc.SystemInfo,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.SystemInfo.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.SystemInfo>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.getSystemInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/GetSystemInfo',
      request,
      metadata || {},
      methodDescriptor_Core_GetSystemInfo);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.SystemInfo>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.getSystemInfo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/GetSystemInfo',
      request,
      metadata || {},
      methodDescriptor_Core_GetSystemInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.SetupRequest,
 *   !proto.rostovvpnrpc.Response>}
 */
const methodDescriptor_Core_Setup = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/Setup',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.SetupRequest,
  proto.rostovvpnrpc.Response,
  /**
   * @param {!proto.rostovvpnrpc.SetupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.Response.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.SetupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.setup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/Setup',
      request,
      metadata || {},
      methodDescriptor_Core_Setup,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.SetupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.Response>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.setup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/Setup',
      request,
      metadata || {},
      methodDescriptor_Core_Setup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.ParseRequest,
 *   !proto.rostovvpnrpc.ParseResponse>}
 */
const methodDescriptor_Core_Parse = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/Parse',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.ParseRequest,
  proto.rostovvpnrpc.ParseResponse,
  /**
   * @param {!proto.rostovvpnrpc.ParseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.ParseResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.ParseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.ParseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.ParseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.parse =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/Parse',
      request,
      metadata || {},
      methodDescriptor_Core_Parse,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.ParseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.ParseResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.parse =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/Parse',
      request,
      metadata || {},
      methodDescriptor_Core_Parse);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.ChangeRostovVPNSettingsRequest,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_ChangeRostovVPNSettings = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/ChangeRostovVPNSettings',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.ChangeRostovVPNSettingsRequest,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.ChangeRostovVPNSettingsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.ChangeRostovVPNSettingsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.CoreInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.changeRostovVPNSettings =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/ChangeRostovVPNSettings',
      request,
      metadata || {},
      methodDescriptor_Core_ChangeRostovVPNSettings,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.ChangeRostovVPNSettingsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.changeRostovVPNSettings =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/ChangeRostovVPNSettings',
      request,
      metadata || {},
      methodDescriptor_Core_ChangeRostovVPNSettings);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.StartRequest,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_StartService = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/StartService',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.StartRequest,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.StartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.CoreInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.startService =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/StartService',
      request,
      metadata || {},
      methodDescriptor_Core_StartService,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.startService =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/StartService',
      request,
      metadata || {},
      methodDescriptor_Core_StartService);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_Stop = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/Stop',
  grpc.web.MethodType.UNARY,
  base_pb.Empty,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.CoreInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.stop =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/Stop',
      request,
      metadata || {},
      methodDescriptor_Core_Stop,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.stop =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/Stop',
      request,
      metadata || {},
      methodDescriptor_Core_Stop);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.StartRequest,
 *   !proto.rostovvpnrpc.CoreInfoResponse>}
 */
const methodDescriptor_Core_Restart = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/Restart',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.StartRequest,
  proto.rostovvpnrpc.CoreInfoResponse,
  /**
   * @param {!proto.rostovvpnrpc.StartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.CoreInfoResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.CoreInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.CoreInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.restart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/Restart',
      request,
      metadata || {},
      methodDescriptor_Core_Restart,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.StartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.CoreInfoResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.restart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/Restart',
      request,
      metadata || {},
      methodDescriptor_Core_Restart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.SelectOutboundRequest,
 *   !proto.rostovvpnrpc.Response>}
 */
const methodDescriptor_Core_SelectOutbound = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/SelectOutbound',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.SelectOutboundRequest,
  proto.rostovvpnrpc.Response,
  /**
   * @param {!proto.rostovvpnrpc.SelectOutboundRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.Response.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.SelectOutboundRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.selectOutbound =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/SelectOutbound',
      request,
      metadata || {},
      methodDescriptor_Core_SelectOutbound,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.SelectOutboundRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.Response>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.selectOutbound =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/SelectOutbound',
      request,
      metadata || {},
      methodDescriptor_Core_SelectOutbound);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.UrlTestRequest,
 *   !proto.rostovvpnrpc.Response>}
 */
const methodDescriptor_Core_UrlTest = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/UrlTest',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.UrlTestRequest,
  proto.rostovvpnrpc.Response,
  /**
   * @param {!proto.rostovvpnrpc.UrlTestRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.Response.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.UrlTestRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.urlTest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/UrlTest',
      request,
      metadata || {},
      methodDescriptor_Core_UrlTest,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.UrlTestRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.Response>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.urlTest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/UrlTest',
      request,
      metadata || {},
      methodDescriptor_Core_UrlTest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.GenerateWarpConfigRequest,
 *   !proto.rostovvpnrpc.WarpGenerationResponse>}
 */
const methodDescriptor_Core_GenerateWarpConfig = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/GenerateWarpConfig',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.GenerateWarpConfigRequest,
  proto.rostovvpnrpc.WarpGenerationResponse,
  /**
   * @param {!proto.rostovvpnrpc.GenerateWarpConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.WarpGenerationResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.GenerateWarpConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.WarpGenerationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.WarpGenerationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.generateWarpConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/GenerateWarpConfig',
      request,
      metadata || {},
      methodDescriptor_Core_GenerateWarpConfig,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.GenerateWarpConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.WarpGenerationResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.generateWarpConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/GenerateWarpConfig',
      request,
      metadata || {},
      methodDescriptor_Core_GenerateWarpConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.SystemProxyStatus>}
 */
const methodDescriptor_Core_GetSystemProxyStatus = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/GetSystemProxyStatus',
  grpc.web.MethodType.UNARY,
  base_pb.Empty,
  proto.rostovvpnrpc.SystemProxyStatus,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.SystemProxyStatus.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.SystemProxyStatus)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.SystemProxyStatus>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.getSystemProxyStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/GetSystemProxyStatus',
      request,
      metadata || {},
      methodDescriptor_Core_GetSystemProxyStatus,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.SystemProxyStatus>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.getSystemProxyStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/GetSystemProxyStatus',
      request,
      metadata || {},
      methodDescriptor_Core_GetSystemProxyStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.SetSystemProxyEnabledRequest,
 *   !proto.rostovvpnrpc.Response>}
 */
const methodDescriptor_Core_SetSystemProxyEnabled = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/SetSystemProxyEnabled',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.SetSystemProxyEnabledRequest,
  proto.rostovvpnrpc.Response,
  /**
   * @param {!proto.rostovvpnrpc.SetSystemProxyEnabledRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.Response.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.SetSystemProxyEnabledRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.setSystemProxyEnabled =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.Core/SetSystemProxyEnabled',
      request,
      metadata || {},
      methodDescriptor_Core_SetSystemProxyEnabled,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.SetSystemProxyEnabledRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.Response>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.setSystemProxyEnabled =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.Core/SetSystemProxyEnabled',
      request,
      metadata || {},
      methodDescriptor_Core_SetSystemProxyEnabled);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.LogMessage>}
 */
const methodDescriptor_Core_LogListener = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.Core/LogListener',
  grpc.web.MethodType.SERVER_STREAMING,
  base_pb.Empty,
  proto.rostovvpnrpc.LogMessage,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.LogMessage.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CoreClient.prototype.logListener =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/LogListener',
      request,
      metadata || {},
      methodDescriptor_Core_LogListener);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.CorePromiseClient.prototype.logListener =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/rostovvpnrpc.Core/LogListener',
      request,
      metadata || {},
      methodDescriptor_Core_LogListener);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.TunnelServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.rostovvpnrpc.TunnelServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.TunnelStartRequest,
 *   !proto.rostovvpnrpc.TunnelResponse>}
 */
const methodDescriptor_TunnelService_Start = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.TunnelService/Start',
  grpc.web.MethodType.UNARY,
  proto.rostovvpnrpc.TunnelStartRequest,
  proto.rostovvpnrpc.TunnelResponse,
  /**
   * @param {!proto.rostovvpnrpc.TunnelStartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.TunnelResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.TunnelStartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.TunnelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.TunnelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.TunnelServiceClient.prototype.start =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Start',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Start,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.TunnelStartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.TunnelResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.TunnelServicePromiseClient.prototype.start =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Start',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Start);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.TunnelResponse>}
 */
const methodDescriptor_TunnelService_Stop = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.TunnelService/Stop',
  grpc.web.MethodType.UNARY,
  base_pb.Empty,
  proto.rostovvpnrpc.TunnelResponse,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.TunnelResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.TunnelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.TunnelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.TunnelServiceClient.prototype.stop =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Stop',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Stop,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.TunnelResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.TunnelServicePromiseClient.prototype.stop =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Stop',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Stop);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.TunnelResponse>}
 */
const methodDescriptor_TunnelService_Status = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.TunnelService/Status',
  grpc.web.MethodType.UNARY,
  base_pb.Empty,
  proto.rostovvpnrpc.TunnelResponse,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.TunnelResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.TunnelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.TunnelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.TunnelServiceClient.prototype.status =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Status',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Status,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.TunnelResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.TunnelServicePromiseClient.prototype.status =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Status',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Status);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.rostovvpnrpc.Empty,
 *   !proto.rostovvpnrpc.TunnelResponse>}
 */
const methodDescriptor_TunnelService_Exit = new grpc.web.MethodDescriptor(
  '/rostovvpnrpc.TunnelService/Exit',
  grpc.web.MethodType.UNARY,
  base_pb.Empty,
  proto.rostovvpnrpc.TunnelResponse,
  /**
   * @param {!proto.rostovvpnrpc.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.rostovvpnrpc.TunnelResponse.deserializeBinary
);


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.rostovvpnrpc.TunnelResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.rostovvpnrpc.TunnelResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.rostovvpnrpc.TunnelServiceClient.prototype.exit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Exit',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Exit,
      callback);
};


/**
 * @param {!proto.rostovvpnrpc.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.rostovvpnrpc.TunnelResponse>}
 *     Promise that resolves to the response
 */
proto.rostovvpnrpc.TunnelServicePromiseClient.prototype.exit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/rostovvpnrpc.TunnelService/Exit',
      request,
      metadata || {},
      methodDescriptor_TunnelService_Exit);
};


module.exports = proto.rostovvpnrpc;

