name: Build
on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"
env:
  REGISTRY_IMAGE: ghcr.io/darkmen203/rostovvpn-core

jobs:
  update_wrt_hash:
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ inputs.channel=='prod' }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git checkout -b main
          curl -L -o rostovvpn-core.tar.gz https://codeload.github.com/Darkmen203/rostovvpn-core/tar.gz/${{ inputs.tag-name  }}
          ROSTOVVPN_CORE_WRT_HASH=$(sha256sum rostovvpn-core.tar.gz | cut -d' ' -f1)
          github_ref_name="${{ inputs.tag-name }}"
          IFS="." read -r -a VERSION_ARRAY <<< "${github_ref_name#v}"
          VERSION_STR="${VERSION_ARRAY[0]}.${VERSION_ARRAY[1]}.${VERSION_ARRAY[2]}"
          sed -i "s|PKG_VERSION:=.*|PKG_VERSION:=${VERSION_STR}|g" wrt/Makefile
          sed -i "s|PKG_HASH:=.*|PKG_HASH:=${ROSTOVVPN_CORE_WRT_HASH}|g" wrt/Makefile
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update WRT package HASH."
          branch: main
          # push_options: --force
  build:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              name: "rostovvpn-core-android",
              os: "ubuntu-latest",
              target: "android",
            }
          - {
              name: "rostovvpn-core-linux-amd64",
              os: "ubuntu-22.04",
              target: "linux-amd64",
            }
          - {
              name: "rostovvpn-core-windows-amd64",
              os: "ubuntu-latest",
              target: "windows-amd64",
              aarch: "x64",
            }
          - {
              name: "rostovvpn-core-macos-universal",
              os: "macos-13",
              target: "macos-universal",
            }
          - { name: "rostovvpn-core-ios", os: "macos-13", target: "ios" }
          # linux custom
          - {
              name: rostovvpn-cli-linux-amd64,
              goos: linux,
              goarch: amd64,
              goamd64: v1,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-amd64-v3,
              goos: linux,
              goarch: amd64,
              goamd64: v3,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-386,
              goos: linux,
              goarch: 386,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-arm64,
              goos: linux,
              goarch: arm64,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-armv5,
              goos: linux,
              goarch: arm,
              goarm: 5,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-armv6,
              goos: linux,
              goarch: arm,
              goarm: 6,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-armv7,
              goos: linux,
              goarch: arm,
              goarm: 7,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mips-softfloat,
              goos: linux,
              goarch: mips,
              gomips: softfloat,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mips-hardfloat,
              goos: linux,
              goarch: mips,
              gomips: hardfloat,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mipsel-softfloat,
              goos: linux,
              goarch: mipsle,
              gomips: softfloat,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mipsel-hardfloat,
              goos: linux,
              goarch: mipsle,
              gomips: hardfloat,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mips64,
              goos: linux,
              goarch: mips64,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-mips64el,
              goos: linux,
              goarch: mips64le,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }
          - {
              name: rostovvpn-cli-linux-s390x,
              goos: linux,
              goarch: s390x,
              target: "linux-custom",
              os: "ubuntu-22.04",
            }

    runs-on: ${{ matrix.job.os }}
    env:
      GOOS: ${{ matrix.job.goos }}
      GOARCH: ${{ matrix.job.goarch }}
      GOAMD64: ${{ matrix.job.goamd64 }}
      GOARM: ${{ matrix.job.goarm }}
      GOMIPS: ${{ matrix.job.gomips }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: false

      - name: Setup Java
        if: startsWith(matrix.job.target,'android')
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup NDK
        if: startsWith(matrix.job.target,'android')
        uses: nttld/setup-ndk@v1.4.0
        id: setup-ndk
        with:
          ndk-version: r26b
          add-to-path: true
          local-cache: false
          link-to-sdk: true

      - name: Setup MinGW
        if: startsWith(matrix.job.target,'windows')
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.job.aarch }}
      - name: Setup macos
        if: startsWith(matrix.job.target,'macos') ||  startsWith(matrix.job.target,'ios')
        run: |
          brew install create-dmg tree coreutils

      - name: Build
        run: |
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}

      - name: Build VPN CLI / Helpers (per-platform)
        run: |
          set -eux
          case "${{ matrix.job.target }}" in
            windows-*)
              # rvpncli.exe (кросс под Windows)
              GOOS=windows GOARCH=amd64 go build -ldflags "-s -w" -trimpath -tags "$(echo $(grep ^TAGS= Makefile | cut -d= -f2))" -o bin/rvpncli.exe ./cmd/rvpncli
              # Elevated helper с UAC
              make win-helper
              ;;
            macos-*)
              # rvpncli (darwin)
              GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w" -trimpath -tags "$(echo $(grep ^TAGS= Makefile | cut -d= -f2 | cut -d, -f1-)),$(echo $(grep ^IOS_ADD_TAGS= Makefile | cut -d= -f2))" -o bin/rvpncli ./cmd/rvpncli
              # LaunchDaemon helper
              make mac-helper
              ;;
            linux-*)
              # rvpncli (linux, под текущую GOARCH из matrix)
              GOOS=${GOOS:-linux} GOARCH=${GOARCH:-amd64} go build -ldflags "-s -w" -trimpath -tags "$(echo $(grep ^TAGS= Makefile | cut -d= -f2))" -o bin/rvpncli ./cmd/rvpncli
              ;;
            *)
              echo "skip extra helpers for ${{ matrix.job.target }}"
              ;;
          esac

      - name: zip
        run: |
          set -eux
          tree || true
          # чуть подчистим мусор
          rm -f /*.h */*.h || true
          rm -f ./rostovvpn-libcore*sources* || true
          rm -f ./rostovvpn-libcore-macos-a*.dylib || true

          TARGET="${{ matrix.job.target }}"
          NAME="${{ matrix.job.name }}"

          STAGE="_stage"
          rm -rf "$STAGE"; mkdir -p "$STAGE"

          case "$TARGET" in
            windows-*)
              # Windows: DLL + оба CLI + elevated helper + webui
              [ -f libcore.dll ] && cp -a libcore.dll "$STAGE/" || true
              [ -f RostovVPNCli.exe ] && cp -a RostovVPNCli.exe "$STAGE/" || true
              # rvpncli.exe могли собрать на шаге "Build VPN CLI / Helpers"
              [ -f rvpncli.exe ] && cp -a rvpncli.exe "$STAGE/" || true
              if [ -d windows ]; then
                mkdir -p "$STAGE/windows"
                [ -f windows/rostovvpn-helper.exe ] && cp -a windows/rostovvpn-helper.exe "$STAGE/windows/" || true
              fi
              [ -d webui ] && cp -a webui "$STAGE/" || true
              ;;

            macos-*)
              # macOS: универсальная dylib + оба CLI + mac helper + xcframework + webui
              [ -f libcore.dylib ] && cp -a libcore.dylib "$STAGE/" || true
              [ -f RostovVPNCli ] && cp -a RostovVPNCli "$STAGE/" || true
              [ -f rvpncli ] && cp -a rvpncli "$STAGE/" || true
              if [ -d macos ]; then
                mkdir -p "$STAGE/macos"
                [ -f macos/rostovvpn-helper ] && cp -a macos/rostovvpn-helper "$STAGE/macos/" || true
              fi
              [ -d Libcore.xcframework ] && cp -a Libcore.xcframework "$STAGE/" || true
              [ -d webui ] && cp -a webui "$STAGE/" || true
              chmod +x "$STAGE"/RostovVPNCli 2>/dev/null || true
              chmod +x "$STAGE"/rvpncli 2>/dev/null || true
              ;;

            linux-*)
              # Linux: so + lib/ + оба CLI + webui
              [ -d lib ] && cp -a lib "$STAGE/" || true
              [ -f libcore.so ] && cp -a libcore.so "$STAGE/" || true
              [ -f RostovVPNCli ] && cp -a RostovVPNCli "$STAGE/" || true
              [ -f rvpncli ] && cp -a rvpncli "$STAGE/" || true
              [ -d webui ] && cp -a webui "$STAGE/" || true
              chmod +x "$STAGE"/RostovVPNCli 2>/dev/null || true
              chmod +x "$STAGE"/rvpncli 2>/dev/null || true
              ;;

            android*)
              # Android: .aar как раньше
              [ -f libcore.aar ] && cp -a libcore.aar "$STAGE/" || true
              ;;

            ios*)
              # iOS: xcframework как раньше
              [ -d Libcore.xcframework ] && cp -a Libcore.xcframework "$STAGE/" || true
              ;;

            *)
              # дефолт: прежняя логика на всякий
              files=$(ls | grep -E '^(libcore\.(dll|so|dylib|aar)|webui|Libcore.xcframework|lib|RostovVPNCli(\.exe)?)$') || true
              for f in $files; do cp -a "$f" "$STAGE/"; done
              ;;
          esac

          tar -czvf "${NAME}.tar.gz" -C "$STAGE" .
        working-directory: bin

      - uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: ${{ matrix.job.name }}
          path: bin/*.tar.gz
          retention-days: 1

  upload-prerelease:
    permissions: write-all
    if: ${{ inputs.upload-artifact }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: rostovvpn-*
          path: bin/

      - name: Display Files Structure
        run: tree
        working-directory: bin

      - name: Delete Current Release Assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: "draft"
          deleteOnlyFromDrafts: false

      - name: Create or Update Draft Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./bin/*.tar.gz
          name: "draft"
          tag_name: "draft"
          prerelease: true

  upload-release:
    permissions: write-all
    if: ${{ inputs.channel=='prod' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: rostovvpn-*
          path: bin/

      - name: Display Files Structure
        run: ls -R
        working-directory: bin

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag-name  }}

          files: bin/*.tar.gz

  make-upload-docker:
    permissions: write-all
    if: ${{ inputs.channel=='prod' }}
    needs: [upload-release]

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          # - linux/arm/v5
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/386
          # - linux/ppc64le
          # - linux/riscv64
          - linux/s390x
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./docker/
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - make-upload-docker
    env:
      LATEST: ${{ endsWith(inputs.tag-name , 'dev') && 'beta' ||'latest'}}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t "${{ env.REGISTRY_IMAGE }}:${{ env.LATEST }}" \
            -t "${{ env.REGISTRY_IMAGE }}:${{ inputs.tag-name   }}" \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.LATEST }}
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ inputs.tag-name  }}
